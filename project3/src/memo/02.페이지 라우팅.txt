라우팅(Route + ing)
: "데이터 전달을 목적으로 최적의 경로를 찾아 데이터를 전송하는 과정"
ex) 서울에 사는 사람이 부산에 사른 친구에게 메시지를 보낼 때, 핸드폰에서 바로 친구 핸드폰으로 보내지는 것이 아니라, 중간중간 설치된 '라우터'라 불리는 장비를 거친다.

페이지라우팅
: 요청에 따라 적절한 페이지를 반환하는 일련의 과정.

리액트의 페이지 라우팅
: '클라이언트 사이드 렌더링' 방식을 쓴다

서버 사이드 렌더링 vs 클라이언트 사이드 렌더링
1. 서버 사이드 렌더링
1) 웹 브라우저에서 naver.com/blog라는 URL로 서비스 요청
2) 웹 서버는 요청 URL에서 경로 blog를 확인, blog.html을 생성해 반환
3) 웹 브라우저는 웹 서버에서 반환된 blog.hml을 보여준다.

- 웹 브라우저에 표시할 페이지를 브라우저가 깜빡이면서 새로고침이 발생
장점)
- 검색 엔진 최적화
- 처음 접속할 때 속도 빠름
단점)
- 사용자가 페이지를 이동할 때마다 서버가 새로운 페이지를 생성해 제공하려면 많은 연산을 수행. => 수많은 요청이 동시에 이루어지는 서비스라면 서버에 부하가 걸릴 수 있음
- 페이지를 이동할 때마다 브라우저는 서버가 제공하는 페이지를 기다려야 하기 때문에 속도가 느려짐

2. 클라이언트 사이드 렌더링
- 리액트 앱은 html 파일이 하나뿐인 단일 페이지 애플리케이션(Single Page Application)
- 페이지를 브라우저가 직접 만든다.

1) 웹 브라우저가 naver.com/blog 로 서비스 요청
2) 웹 서버는 요청 URL의 경로를 따지지 않고 페이지의 틀 역할을 하는 index, html과 자바스크립트 애플리케이션인 리액트 앱을 함께 반환
3) 웹 브라우저는 서버에서 제공된 index.html을 보여주고, 자바스크립트로 이루어진 리액트 앱을 실행. 리액트 앱은 현재 경로에 맞는 페이지를 보여준다.
4) 사용자가 페이지를 이동하면 웹 브라우저는 서버에서 받은 리액트 앱을 실행해 자체적으로 페이지 교체

- 사용자가 보는 페이지를 웹 서버가 아닌 브라우저가 완성
- 브라우저는 처음 접속할 때만 서버에게 데이터를 요청하며 페이지를 이동할 때는 별도의 요청을 하지 않음

단점)
- 처음 사이트에 접속할 때는 서버 사이드 렌더링보다 속도가 느리다.

장점)
- 페이지를 이동할 때는 브라우저에서 페이지를 직접 교체하므로 속도가 훨씬 빠르다.
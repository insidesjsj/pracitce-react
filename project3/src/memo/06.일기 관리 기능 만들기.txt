일기 관리 기능
: [감정 일기장]에서 사용자가 만들고 수정하고 삭제하는 여러 일기들을 데이터로 관리

- [할 일 관리] 앱에서는 UI 구현 이후 관리 기능을 만들었지만 [감정 일기장]은 여러 개의 페이지로 이루어진 복잡한 구조이기 때문에 핵심 기능 우선 구현

1. 일기 데이터 state 만들기
- 일기 데이터를 관리 하기 위한 State 생성
- 일기 데이터는 모든 페이지에서 필요하므로 최상위 컴포넌트인 App에서 생성
- useReducer로 App 컴포넌트에 일기 데이터를 관리하기 위한 State 생성

2. 일기 State 업데이트 기능 구현
- 일기 State 업데이트란 App 컴포넌트의 State인 data를 작성, 수정, 삭제하는 일체의 과정

1) Create 기능 만들기
- 새 일기를 추가할 때 key로 사용할 참조 객체로 idRef 생성
: 앞으로 배열 형태의 일기를 리스트로 렌더링 할 때 아이템별로 고유한 key를 부여하기 위함

- 새 일기를 생성하는 onCreate 함수 생성
[1] 함수 onCreate는 일기를 생성하므로 앞서 만든 Editor 컴포넌트에서 호출
[2] 새 일기를 작성할 때 입력하는 정보
: 날짜(date): yyyy-mm-dd 형식의 문자열
: 감정 이미지 번호(emotionId): 숫자
: 일기(content): 문자열
[3] 따라서 사용자가 입력한 date, content, emotionId를 매개변수로 저장한 다음 함수 dispatch를 호출해야 함.

2) UPDATE 기능 만들기
- App 컴포넌트에 일기 아이템을 수정하는 함수 onUpdate 생성

3) DELETE 기능 만들기
- App 컴포넌트에 특정 일기를 삭제하는 함수 onDelete 생

4) 목(Mcok) 데이터 설정
- 향후 페이지를 구현할 때 일기를 직접 작성하지 않아도 이 데이터 만으로도 테스트가 가능
- 목 데이터 처럼 값이 변하지 않고, 컴포넌트의 라이프 사이클과 관련 없는 함수나 값은 '컴포넌트 함수 내부에 생성 X', '컴포넌트 함수 외부에 생성 O'
why? 컴포넌트도 함수이기 때문에 State를 업데이트 하거나 부모 컴포넌트에서 리렌더 발생시 다시 호출 => 불필요한 연산 추가
- useEffect를 이용해 App 컴포넌트를 마운트할 때 일기 State 값을 목 데이터로 업데이트
- 개발자 도구 [Component] 탭에서 App 컴포넌트를 클릭 후, Reducer 항목이 mockData로 초기화 되는지 확인

5) 데이터 로딩 상태 구현
: App 컴포넌트는 마운트 시점에 일기 State를 목 데이터로 업데이트
: 데이터를 모두 업데이트 하기 전에 자식 컴포넌트에서 일기 State 값을 사용하려고 하면, 초기화 되지 않은 데이터에 접근하는 것이므로 문제가 발생
- 이런 문제가 발생하지 않도록 현재의 App 컴포넌트에서 데이터 로딩 상태를 알려주는 State 생성
- State 변수 isDataLoaded를 생성하고 초깃값으로 false 전달.
- 데이터 로딩 모두 완료시 이 값을 true로 변경
- isDataLoaded가 true 일 때 자식 컴포넌트들을 페이지에 마운트

6) Context 설정하기
: Context 를 이용해 Props Drilling 없이 [감정 일기장]의 모든 페이지에서 일기 State와 이를 업데이트하는 함수를 사용하도록 만든다.

'DiaryStateContext'
- App.js에서 일기 State 값을 공급
- DiaryStateContext의 Provider 컴포넌트를 App의 자식으로 배치

'DiaryDispatchContext'
- 일기 State를 업데이트 하는 함수 onCreate, onUpdate, onDelete를 컴포넌트 트리에 공급
- DiaryDispatchContext의 Provider 컴포넌트를 App의 자식으로 배치하고 Props(value)로 3개의 업데이트 함수 전달

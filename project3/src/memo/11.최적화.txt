최적화
: 웹 프런트엔드의 최적화는 이미지와 폰트 같은 미디어 파일을 최적화 하는 방법부터 특정 페이지를 정적으로 미리 생성해놓는 방법 등 여러 가지 기법이 있다.
- 이번 절에서는 리액트 앱의 렌더링 낭비를 제거하는데 초점을 맞춰 최적화를 진행

1. 분석하기
1) Home 페이지 분석
- 정렬 기준을 병결할 때마다 모든 DiaryItem이 리렌더

2) New & Edit 페이지 분석
- 날짜 변경, 일기 작성, 감정 이미지를 변경할 때 EmotionItem 컴포넌트가 모두 리렌더 된다.

2. DiaryItem 최적화
- DiaryItem 컴포넌트는 Context에서 데이터를 받거나 Props 함수나 배열 같은 참조형 값도 받지 않는다.
- React.memo를 이용해 Props를 기준으로 메모이제이션

3. EmotionItem 최적화
- EmotionItem은 Editor 컴포넌트에서 Props로 함수인 handleChangeEmotion을 받기 때문에 React.memo를 적용한다고 해도 최적화가 이루어지지 않음.
- 컴포넌트가 리렌더 되면 함수 또한 다시 생성되기 때문임.
- Editor 컴포넌트를 리렌더 해도 함수 handleChangeEmotion을 다시 생성하지 않도록 useCallback을 사용해 메모이제이션

- setState에서 참조하는 state의 값이 마운트 이후 변하지 않기 때문에 State 최신값을 유지할 수 없어 정상적으로 상태가 업데이트 되지 않음.
- 이 때 사용하는 기능이 바로 '함수형 업데이트'
- 함수형 업데이트는 setState의 인수로 값이 아닌 함수를 전달하는 방법
- 함수 handleChangeEmotion에서 함수형 업데이트 사용
- EmotionItem에서 React.memo를 적용해 Props를 기준으로 최적화

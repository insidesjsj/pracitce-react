Header
: 월 단위 날짜 이동

DiaryList
: 최신순, 오래된 순 정렬 기능

1. 헤더 구현하기
1) Home 컴포넌트에서 렌더링 결과를 확인하기 위한 임시 Props를 만들어 전달

2) 좌 우 버튼 클릭시 한달 단위 이동 기능 구현
- 헤더에 표시할 날짜를 저장할 State 변수 pivotDate를 생성
- 헤더 컴포넌트에서 양쪽의 버튼을 클릭하면 pivotDate를 앞뒤로 이동시키는 함수 onIncreaseMonth, onDecreaseMonth를 만든다.

2. 날짜에 따라 일기 필터링
- useContext를 이용해 App.js에서 일기 데이터를 공급하는 DiaryStatContext를 불러온다.
- 필터링한 일기를 저장할 State 변수 filteredDate를 만들어준다.
- util.js에 해당 월의 시작과 끝을 반환하는 함수 getMonthRangeByDate 생성.
: 일기 State가 변경될 때마다 현재(년/월)에 해당하는 일기 데이터를 필터링 해야 함 -> 그 필터링 데이터로 filteredDate를 업데이트
-> 이 기능을 구현하기 위함. 핵심기능이 아니므로 util.js에서 생성
- 함수 getMonthRangeByDate와 useEffect를 이용해 Home 컴포넌트의 pivoDate가 변할 때마다 해당 월에 작성된 일기를 필터링

3. DiaryList와 정렬 기능 만들기
1) Diary 컴포넌트 생성하기
- component 폴더에 DiaryList.js 와 DiaryList.css를 생성
- DiaryList를 Home 컴포넌트의 자식으로 배치

2) 상단부 UI 구현
- 정렬 기능이 있는 입력 폼, <새 일기 쓰기> 버튼의 UI 만들기

3) 상단부 정렬 기능 구현
- SortOptionList를 DiaryList 컴포넌트 외부에 작성
: 정렬 기능 구현을 위해 <select> 태그의 옵션 리스트를 배열로 만든다. (정렬 조건은 '최신순', '오래된 순' 두가지로 설정

- sortOptionList와 map 메서드를 이용해 <select>의 <option> 태그를 반복해 렌더링

- 사용자가 선택한 정렬 유형을 저장하기 위해 sortType이라는 이름으로 State 생성
- <select> 태그에서 사용할 onChangeSortType 생성
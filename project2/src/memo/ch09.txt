Context
: 리액트 컴포넌트 트리 전체를 대상으로 데이터를 공급하는 기능

Context를 사용하는 이유
- Props Drilling 문제를 해결하기 위함

Props Drilling?
- Props는 컴포넌트 트리에서 언제나 부모 => 자식으로 단방향으로 전달된다.
- 하지만 리액트에서는 자식의 자식 컴포넌트에 직접 데이터를 전달하는 것이 불가능 하다.
- 원하는 목적지까지 데이터를 전달하기 위해서는 경로상에 있는 모든 컴포넌트에 일일히 Props를 전달해야 한다.
- 웹 서비스를 리액트로 설계하는 경우, 적게는 10개, 많게는 100 이상의 컴포넌트를 실제로 관리해야 하는데 Props 전달 흐름이 어려워져 유지 보수가 어렵다.

Context 란?
- 리액트에서 Context는 같은 문맥 아래에 있는 컴포넌트 그룹에 데이터를 공급하는 기능

ContextAPI
: Context를 만들고 다루는 리액트 기능

1) Context 만들기
import React from "react";
const MyContext = React.createContext(defaultValue);

2) Context에 데이터 공급하기
import React from "react";

const MyContext = React.createContext(defaultValue);

function App () {
    const data = 'data';
    return (
        <div>
            <Header />
            <MyContext.Provider value={data}>   << MyContext.Provider를 Ap 컴포넌트의 자식으로 배치. 이제 Provider가 설정한 자식, 자손 컴포넌트들은 MyContext로 묶여 이 객체에서 공급하는 데이터를 사용할 수 있다. Provider 컴포넌ㅌ트에 Props(value)를 전달해 MyContext가 공급할 값을 설정한다.
                <Body />
            </MyContext.Provider>
        </div>
    )
}

3) Context가 공급하는 데이터 사용하기
useContext: 특정 Context가 공급하는 데이터를 불러오는 리액트 훅

import React, {useContext} from "react";

const MyContext = React.createContext(defaultValue);

function App () {
    (...)
}

function Main () {
    const data = useContext(MyContext);
}

